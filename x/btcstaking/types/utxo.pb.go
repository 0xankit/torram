// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: torram/btcstaking/utxo.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UTXO struct {
	TxId          string     `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Vout          uint32     `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	Address       string     `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Amount        types.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount"`
	Confirmations uint64     `protobuf:"varint,5,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	ScriptPubKey  string     `protobuf:"bytes,6,opt,name=script_pub_key,json=scriptPubKey,proto3" json:"script_pub_key,omitempty"`
	Spendable     bool       `protobuf:"varint,7,opt,name=spendable,proto3" json:"spendable,omitempty"`
	Safe          bool       `protobuf:"varint,8,opt,name=safe,proto3" json:"safe,omitempty"`
	LockTime      uint64     `protobuf:"varint,9,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	IsStaked      bool       `protobuf:"varint,10,opt,name=is_staked,json=isStaked,proto3" json:"is_staked,omitempty"`
}

func (m *UTXO) Reset()         { *m = UTXO{} }
func (m *UTXO) String() string { return proto.CompactTextString(m) }
func (*UTXO) ProtoMessage()    {}
func (*UTXO) Descriptor() ([]byte, []int) {
	return fileDescriptor_d92bb6dd33d6a67a, []int{0}
}
func (m *UTXO) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UTXO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UTXO.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UTXO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UTXO.Merge(m, src)
}
func (m *UTXO) XXX_Size() int {
	return m.Size()
}
func (m *UTXO) XXX_DiscardUnknown() {
	xxx_messageInfo_UTXO.DiscardUnknown(m)
}

var xxx_messageInfo_UTXO proto.InternalMessageInfo

func (m *UTXO) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *UTXO) GetVout() uint32 {
	if m != nil {
		return m.Vout
	}
	return 0
}

func (m *UTXO) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UTXO) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *UTXO) GetConfirmations() uint64 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *UTXO) GetScriptPubKey() string {
	if m != nil {
		return m.ScriptPubKey
	}
	return ""
}

func (m *UTXO) GetSpendable() bool {
	if m != nil {
		return m.Spendable
	}
	return false
}

func (m *UTXO) GetSafe() bool {
	if m != nil {
		return m.Safe
	}
	return false
}

func (m *UTXO) GetLockTime() uint64 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

func (m *UTXO) GetIsStaked() bool {
	if m != nil {
		return m.IsStaked
	}
	return false
}

type StakingPool struct {
	Utxos []*UTXO `protobuf:"bytes,1,rep,name=utxos,proto3" json:"utxos,omitempty"`
}

func (m *StakingPool) Reset()         { *m = StakingPool{} }
func (m *StakingPool) String() string { return proto.CompactTextString(m) }
func (*StakingPool) ProtoMessage()    {}
func (*StakingPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_d92bb6dd33d6a67a, []int{1}
}
func (m *StakingPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingPool.Merge(m, src)
}
func (m *StakingPool) XXX_Size() int {
	return m.Size()
}
func (m *StakingPool) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingPool.DiscardUnknown(m)
}

var xxx_messageInfo_StakingPool proto.InternalMessageInfo

func (m *StakingPool) GetUtxos() []*UTXO {
	if m != nil {
		return m.Utxos
	}
	return nil
}

func init() {
	proto.RegisterType((*UTXO)(nil), "torram.btcstaking.UTXO")
	proto.RegisterType((*StakingPool)(nil), "torram.btcstaking.StakingPool")
}

func init() { proto.RegisterFile("torram/btcstaking/utxo.proto", fileDescriptor_d92bb6dd33d6a67a) }

var fileDescriptor_d92bb6dd33d6a67a = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xc1, 0x8e, 0xd3, 0x30,
	0x14, 0x8c, 0x77, 0xd3, 0x6e, 0xe2, 0xb2, 0x48, 0x18, 0x24, 0xbc, 0xcb, 0x2a, 0x44, 0xab, 0x1e,
	0x72, 0xc1, 0x51, 0xdb, 0x03, 0x17, 0x4e, 0xe5, 0x84, 0x38, 0x50, 0xa5, 0x45, 0x42, 0x5c, 0x22,
	0x27, 0x71, 0x2b, 0xab, 0x4d, 0x5e, 0x14, 0x3b, 0x55, 0xfa, 0x17, 0x7c, 0x0f, 0x5f, 0xd0, 0x63,
	0x8f, 0x9c, 0x10, 0x6a, 0x7f, 0x04, 0xc5, 0x29, 0x2a, 0x88, 0xdb, 0x78, 0xe6, 0x3d, 0xbd, 0xf1,
	0x0c, 0x7e, 0xd0, 0x50, 0x55, 0x3c, 0x0f, 0x13, 0x9d, 0x2a, 0xcd, 0xd7, 0xb2, 0x58, 0x85, 0xb5,
	0x6e, 0x80, 0x95, 0x15, 0x68, 0x20, 0xcf, 0x3a, 0x95, 0x5d, 0xd4, 0x7b, 0x2f, 0x05, 0x95, 0x83,
	0x0a, 0x13, 0xae, 0x44, 0xb8, 0x1d, 0x25, 0x42, 0xf3, 0x51, 0x98, 0x82, 0x2c, 0xba, 0x95, 0xfb,
	0x17, 0x2b, 0x58, 0x81, 0x81, 0x61, 0x8b, 0x3a, 0xf6, 0xf1, 0xfb, 0x15, 0xb6, 0x3f, 0x2f, 0xbe,
	0x7c, 0x22, 0xcf, 0x71, 0x4f, 0x37, 0xb1, 0xcc, 0x28, 0xf2, 0x51, 0xe0, 0x46, 0xb6, 0x6e, 0x3e,
	0x64, 0x84, 0x60, 0x7b, 0x0b, 0xb5, 0xa6, 0x57, 0x3e, 0x0a, 0x6e, 0x23, 0x83, 0x09, 0xc5, 0x37,
	0x3c, 0xcb, 0x2a, 0xa1, 0x14, 0xbd, 0x36, 0xa3, 0x7f, 0x9e, 0xe4, 0x2d, 0xee, 0xf3, 0x1c, 0xea,
	0x42, 0x53, 0xdb, 0x47, 0xc1, 0x60, 0x7c, 0xc7, 0x3a, 0x4b, 0xac, 0xb5, 0xc4, 0xce, 0x96, 0xd8,
	0x7b, 0x90, 0xc5, 0xd4, 0xde, 0xff, 0x7c, 0x6d, 0x45, 0xe7, 0x71, 0x32, 0xc4, 0xb7, 0x29, 0x14,
	0x4b, 0x59, 0xe5, 0x5c, 0x4b, 0x28, 0x14, 0xed, 0xf9, 0x28, 0xb0, 0xa3, 0x7f, 0x49, 0x32, 0xc4,
	0x4f, 0x55, 0x5a, 0xc9, 0x52, 0xc7, 0x65, 0x9d, 0xc4, 0x6b, 0xb1, 0xa3, 0x7d, 0x73, 0xff, 0x49,
	0xc7, 0xce, 0xea, 0xe4, 0xa3, 0xd8, 0x91, 0x07, 0xec, 0xaa, 0x52, 0x14, 0x19, 0x4f, 0x36, 0x82,
	0xde, 0xf8, 0x28, 0x70, 0xa2, 0x0b, 0xd1, 0x7e, 0x48, 0xf1, 0xa5, 0xa0, 0x8e, 0x11, 0x0c, 0x26,
	0xaf, 0xb0, 0xbb, 0x81, 0x74, 0x1d, 0x6b, 0x99, 0x0b, 0xea, 0x9a, 0xcb, 0x4e, 0x4b, 0x2c, 0x64,
	0x6e, 0x44, 0xa9, 0xe2, 0x36, 0x63, 0x91, 0x51, 0x6c, 0xb6, 0x1c, 0xa9, 0xe6, 0xe6, 0xfd, 0xf8,
	0x0e, 0x0f, 0xe6, 0x5d, 0xfa, 0x33, 0x80, 0x0d, 0x79, 0x83, 0x7b, 0x6d, 0x45, 0x8a, 0x22, 0xff,
	0x3a, 0x18, 0x8c, 0x5f, 0xb2, 0xff, 0x4a, 0x62, 0x6d, 0xd4, 0x51, 0x37, 0x35, 0x9d, 0xec, 0x8f,
	0x1e, 0x3a, 0x1c, 0x3d, 0xf4, 0xeb, 0xe8, 0xa1, 0x6f, 0x27, 0xcf, 0x3a, 0x9c, 0x3c, 0xeb, 0xc7,
	0xc9, 0xb3, 0xbe, 0xde, 0x9d, 0xbb, 0x6f, 0xfe, 0x6e, 0x5f, 0xef, 0x4a, 0xa1, 0x92, 0xbe, 0xa9,
	0x6d, 0xf2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x87, 0xde, 0x7c, 0xd2, 0x1f, 0x02, 0x00, 0x00,
}

func (m *UTXO) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UTXO) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UTXO) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsStaked {
		i--
		if m.IsStaked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.LockTime != 0 {
		i = encodeVarintUtxo(dAtA, i, uint64(m.LockTime))
		i--
		dAtA[i] = 0x48
	}
	if m.Safe {
		i--
		if m.Safe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Spendable {
		i--
		if m.Spendable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ScriptPubKey) > 0 {
		i -= len(m.ScriptPubKey)
		copy(dAtA[i:], m.ScriptPubKey)
		i = encodeVarintUtxo(dAtA, i, uint64(len(m.ScriptPubKey)))
		i--
		dAtA[i] = 0x32
	}
	if m.Confirmations != 0 {
		i = encodeVarintUtxo(dAtA, i, uint64(m.Confirmations))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintUtxo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintUtxo(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Vout != 0 {
		i = encodeVarintUtxo(dAtA, i, uint64(m.Vout))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintUtxo(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Utxos) > 0 {
		for iNdEx := len(m.Utxos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Utxos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUtxo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintUtxo(dAtA []byte, offset int, v uint64) int {
	offset -= sovUtxo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UTXO) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovUtxo(uint64(l))
	}
	if m.Vout != 0 {
		n += 1 + sovUtxo(uint64(m.Vout))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovUtxo(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovUtxo(uint64(l))
	if m.Confirmations != 0 {
		n += 1 + sovUtxo(uint64(m.Confirmations))
	}
	l = len(m.ScriptPubKey)
	if l > 0 {
		n += 1 + l + sovUtxo(uint64(l))
	}
	if m.Spendable {
		n += 2
	}
	if m.Safe {
		n += 2
	}
	if m.LockTime != 0 {
		n += 1 + sovUtxo(uint64(m.LockTime))
	}
	if m.IsStaked {
		n += 2
	}
	return n
}

func (m *StakingPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Utxos) > 0 {
		for _, e := range m.Utxos {
			l = e.Size()
			n += 1 + l + sovUtxo(uint64(l))
		}
	}
	return n
}

func sovUtxo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUtxo(x uint64) (n int) {
	return sovUtxo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UTXO) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUtxo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UTXO: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UTXO: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUtxo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUtxo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUtxo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vout", wireType)
			}
			m.Vout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUtxo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUtxo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUtxo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUtxo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUtxo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUtxo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUtxo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmations", wireType)
			}
			m.Confirmations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUtxo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Confirmations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUtxo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUtxo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUtxo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spendable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUtxo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Spendable = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Safe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUtxo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Safe = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTime", wireType)
			}
			m.LockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUtxo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStaked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUtxo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStaked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUtxo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUtxo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUtxo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utxos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUtxo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUtxo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUtxo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Utxos = append(m.Utxos, &UTXO{})
			if err := m.Utxos[len(m.Utxos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUtxo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUtxo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUtxo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUtxo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUtxo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUtxo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUtxo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUtxo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUtxo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUtxo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUtxo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUtxo = fmt.Errorf("proto: unexpected end of group")
)
