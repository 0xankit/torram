// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package btcstaking

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_UTXO                protoreflect.MessageDescriptor
	fd_UTXO_tx_id          protoreflect.FieldDescriptor
	fd_UTXO_vout           protoreflect.FieldDescriptor
	fd_UTXO_address        protoreflect.FieldDescriptor
	fd_UTXO_amount         protoreflect.FieldDescriptor
	fd_UTXO_confirmations  protoreflect.FieldDescriptor
	fd_UTXO_script_pub_key protoreflect.FieldDescriptor
	fd_UTXO_spendable      protoreflect.FieldDescriptor
	fd_UTXO_safe           protoreflect.FieldDescriptor
	fd_UTXO_lock_time      protoreflect.FieldDescriptor
	fd_UTXO_is_staked      protoreflect.FieldDescriptor
)

func init() {
	file_torram_btcstaking_utxo_proto_init()
	md_UTXO = File_torram_btcstaking_utxo_proto.Messages().ByName("UTXO")
	fd_UTXO_tx_id = md_UTXO.Fields().ByName("tx_id")
	fd_UTXO_vout = md_UTXO.Fields().ByName("vout")
	fd_UTXO_address = md_UTXO.Fields().ByName("address")
	fd_UTXO_amount = md_UTXO.Fields().ByName("amount")
	fd_UTXO_confirmations = md_UTXO.Fields().ByName("confirmations")
	fd_UTXO_script_pub_key = md_UTXO.Fields().ByName("script_pub_key")
	fd_UTXO_spendable = md_UTXO.Fields().ByName("spendable")
	fd_UTXO_safe = md_UTXO.Fields().ByName("safe")
	fd_UTXO_lock_time = md_UTXO.Fields().ByName("lock_time")
	fd_UTXO_is_staked = md_UTXO.Fields().ByName("is_staked")
}

var _ protoreflect.Message = (*fastReflection_UTXO)(nil)

type fastReflection_UTXO UTXO

func (x *UTXO) ProtoReflect() protoreflect.Message {
	return (*fastReflection_UTXO)(x)
}

func (x *UTXO) slowProtoReflect() protoreflect.Message {
	mi := &file_torram_btcstaking_utxo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_UTXO_messageType fastReflection_UTXO_messageType
var _ protoreflect.MessageType = fastReflection_UTXO_messageType{}

type fastReflection_UTXO_messageType struct{}

func (x fastReflection_UTXO_messageType) Zero() protoreflect.Message {
	return (*fastReflection_UTXO)(nil)
}
func (x fastReflection_UTXO_messageType) New() protoreflect.Message {
	return new(fastReflection_UTXO)
}
func (x fastReflection_UTXO_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_UTXO
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_UTXO) Descriptor() protoreflect.MessageDescriptor {
	return md_UTXO
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_UTXO) Type() protoreflect.MessageType {
	return _fastReflection_UTXO_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_UTXO) New() protoreflect.Message {
	return new(fastReflection_UTXO)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_UTXO) Interface() protoreflect.ProtoMessage {
	return (*UTXO)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_UTXO) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TxId != "" {
		value := protoreflect.ValueOfString(x.TxId)
		if !f(fd_UTXO_tx_id, value) {
			return
		}
	}
	if x.Vout != uint32(0) {
		value := protoreflect.ValueOfUint32(x.Vout)
		if !f(fd_UTXO_vout, value) {
			return
		}
	}
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_UTXO_address, value) {
			return
		}
	}
	if x.Amount != nil {
		value := protoreflect.ValueOfMessage(x.Amount.ProtoReflect())
		if !f(fd_UTXO_amount, value) {
			return
		}
	}
	if x.Confirmations != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Confirmations)
		if !f(fd_UTXO_confirmations, value) {
			return
		}
	}
	if x.ScriptPubKey != "" {
		value := protoreflect.ValueOfString(x.ScriptPubKey)
		if !f(fd_UTXO_script_pub_key, value) {
			return
		}
	}
	if x.Spendable != false {
		value := protoreflect.ValueOfBool(x.Spendable)
		if !f(fd_UTXO_spendable, value) {
			return
		}
	}
	if x.Safe != false {
		value := protoreflect.ValueOfBool(x.Safe)
		if !f(fd_UTXO_safe, value) {
			return
		}
	}
	if x.LockTime != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LockTime)
		if !f(fd_UTXO_lock_time, value) {
			return
		}
	}
	if x.IsStaked != false {
		value := protoreflect.ValueOfBool(x.IsStaked)
		if !f(fd_UTXO_is_staked, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_UTXO) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "torram.btcstaking.UTXO.tx_id":
		return x.TxId != ""
	case "torram.btcstaking.UTXO.vout":
		return x.Vout != uint32(0)
	case "torram.btcstaking.UTXO.address":
		return x.Address != ""
	case "torram.btcstaking.UTXO.amount":
		return x.Amount != nil
	case "torram.btcstaking.UTXO.confirmations":
		return x.Confirmations != uint64(0)
	case "torram.btcstaking.UTXO.script_pub_key":
		return x.ScriptPubKey != ""
	case "torram.btcstaking.UTXO.spendable":
		return x.Spendable != false
	case "torram.btcstaking.UTXO.safe":
		return x.Safe != false
	case "torram.btcstaking.UTXO.lock_time":
		return x.LockTime != uint64(0)
	case "torram.btcstaking.UTXO.is_staked":
		return x.IsStaked != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: torram.btcstaking.UTXO"))
		}
		panic(fmt.Errorf("message torram.btcstaking.UTXO does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UTXO) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "torram.btcstaking.UTXO.tx_id":
		x.TxId = ""
	case "torram.btcstaking.UTXO.vout":
		x.Vout = uint32(0)
	case "torram.btcstaking.UTXO.address":
		x.Address = ""
	case "torram.btcstaking.UTXO.amount":
		x.Amount = nil
	case "torram.btcstaking.UTXO.confirmations":
		x.Confirmations = uint64(0)
	case "torram.btcstaking.UTXO.script_pub_key":
		x.ScriptPubKey = ""
	case "torram.btcstaking.UTXO.spendable":
		x.Spendable = false
	case "torram.btcstaking.UTXO.safe":
		x.Safe = false
	case "torram.btcstaking.UTXO.lock_time":
		x.LockTime = uint64(0)
	case "torram.btcstaking.UTXO.is_staked":
		x.IsStaked = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: torram.btcstaking.UTXO"))
		}
		panic(fmt.Errorf("message torram.btcstaking.UTXO does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_UTXO) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "torram.btcstaking.UTXO.tx_id":
		value := x.TxId
		return protoreflect.ValueOfString(value)
	case "torram.btcstaking.UTXO.vout":
		value := x.Vout
		return protoreflect.ValueOfUint32(value)
	case "torram.btcstaking.UTXO.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "torram.btcstaking.UTXO.amount":
		value := x.Amount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "torram.btcstaking.UTXO.confirmations":
		value := x.Confirmations
		return protoreflect.ValueOfUint64(value)
	case "torram.btcstaking.UTXO.script_pub_key":
		value := x.ScriptPubKey
		return protoreflect.ValueOfString(value)
	case "torram.btcstaking.UTXO.spendable":
		value := x.Spendable
		return protoreflect.ValueOfBool(value)
	case "torram.btcstaking.UTXO.safe":
		value := x.Safe
		return protoreflect.ValueOfBool(value)
	case "torram.btcstaking.UTXO.lock_time":
		value := x.LockTime
		return protoreflect.ValueOfUint64(value)
	case "torram.btcstaking.UTXO.is_staked":
		value := x.IsStaked
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: torram.btcstaking.UTXO"))
		}
		panic(fmt.Errorf("message torram.btcstaking.UTXO does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UTXO) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "torram.btcstaking.UTXO.tx_id":
		x.TxId = value.Interface().(string)
	case "torram.btcstaking.UTXO.vout":
		x.Vout = uint32(value.Uint())
	case "torram.btcstaking.UTXO.address":
		x.Address = value.Interface().(string)
	case "torram.btcstaking.UTXO.amount":
		x.Amount = value.Message().Interface().(*v1beta1.Coin)
	case "torram.btcstaking.UTXO.confirmations":
		x.Confirmations = value.Uint()
	case "torram.btcstaking.UTXO.script_pub_key":
		x.ScriptPubKey = value.Interface().(string)
	case "torram.btcstaking.UTXO.spendable":
		x.Spendable = value.Bool()
	case "torram.btcstaking.UTXO.safe":
		x.Safe = value.Bool()
	case "torram.btcstaking.UTXO.lock_time":
		x.LockTime = value.Uint()
	case "torram.btcstaking.UTXO.is_staked":
		x.IsStaked = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: torram.btcstaking.UTXO"))
		}
		panic(fmt.Errorf("message torram.btcstaking.UTXO does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UTXO) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "torram.btcstaking.UTXO.amount":
		if x.Amount == nil {
			x.Amount = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Amount.ProtoReflect())
	case "torram.btcstaking.UTXO.tx_id":
		panic(fmt.Errorf("field tx_id of message torram.btcstaking.UTXO is not mutable"))
	case "torram.btcstaking.UTXO.vout":
		panic(fmt.Errorf("field vout of message torram.btcstaking.UTXO is not mutable"))
	case "torram.btcstaking.UTXO.address":
		panic(fmt.Errorf("field address of message torram.btcstaking.UTXO is not mutable"))
	case "torram.btcstaking.UTXO.confirmations":
		panic(fmt.Errorf("field confirmations of message torram.btcstaking.UTXO is not mutable"))
	case "torram.btcstaking.UTXO.script_pub_key":
		panic(fmt.Errorf("field script_pub_key of message torram.btcstaking.UTXO is not mutable"))
	case "torram.btcstaking.UTXO.spendable":
		panic(fmt.Errorf("field spendable of message torram.btcstaking.UTXO is not mutable"))
	case "torram.btcstaking.UTXO.safe":
		panic(fmt.Errorf("field safe of message torram.btcstaking.UTXO is not mutable"))
	case "torram.btcstaking.UTXO.lock_time":
		panic(fmt.Errorf("field lock_time of message torram.btcstaking.UTXO is not mutable"))
	case "torram.btcstaking.UTXO.is_staked":
		panic(fmt.Errorf("field is_staked of message torram.btcstaking.UTXO is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: torram.btcstaking.UTXO"))
		}
		panic(fmt.Errorf("message torram.btcstaking.UTXO does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_UTXO) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "torram.btcstaking.UTXO.tx_id":
		return protoreflect.ValueOfString("")
	case "torram.btcstaking.UTXO.vout":
		return protoreflect.ValueOfUint32(uint32(0))
	case "torram.btcstaking.UTXO.address":
		return protoreflect.ValueOfString("")
	case "torram.btcstaking.UTXO.amount":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "torram.btcstaking.UTXO.confirmations":
		return protoreflect.ValueOfUint64(uint64(0))
	case "torram.btcstaking.UTXO.script_pub_key":
		return protoreflect.ValueOfString("")
	case "torram.btcstaking.UTXO.spendable":
		return protoreflect.ValueOfBool(false)
	case "torram.btcstaking.UTXO.safe":
		return protoreflect.ValueOfBool(false)
	case "torram.btcstaking.UTXO.lock_time":
		return protoreflect.ValueOfUint64(uint64(0))
	case "torram.btcstaking.UTXO.is_staked":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: torram.btcstaking.UTXO"))
		}
		panic(fmt.Errorf("message torram.btcstaking.UTXO does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_UTXO) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in torram.btcstaking.UTXO", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_UTXO) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UTXO) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_UTXO) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_UTXO) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*UTXO)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.TxId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Vout != 0 {
			n += 1 + runtime.Sov(uint64(x.Vout))
		}
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Amount != nil {
			l = options.Size(x.Amount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Confirmations != 0 {
			n += 1 + runtime.Sov(uint64(x.Confirmations))
		}
		l = len(x.ScriptPubKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Spendable {
			n += 2
		}
		if x.Safe {
			n += 2
		}
		if x.LockTime != 0 {
			n += 1 + runtime.Sov(uint64(x.LockTime))
		}
		if x.IsStaked {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*UTXO)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.IsStaked {
			i--
			if x.IsStaked {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x50
		}
		if x.LockTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LockTime))
			i--
			dAtA[i] = 0x48
		}
		if x.Safe {
			i--
			if x.Safe {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x40
		}
		if x.Spendable {
			i--
			if x.Spendable {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x38
		}
		if len(x.ScriptPubKey) > 0 {
			i -= len(x.ScriptPubKey)
			copy(dAtA[i:], x.ScriptPubKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ScriptPubKey)))
			i--
			dAtA[i] = 0x32
		}
		if x.Confirmations != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Confirmations))
			i--
			dAtA[i] = 0x28
		}
		if x.Amount != nil {
			encoded, err := options.Marshal(x.Amount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Vout != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Vout))
			i--
			dAtA[i] = 0x10
		}
		if len(x.TxId) > 0 {
			i -= len(x.TxId)
			copy(dAtA[i:], x.TxId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TxId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*UTXO)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UTXO: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UTXO: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TxId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Vout", wireType)
				}
				x.Vout = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Vout |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Amount == nil {
					x.Amount = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Amount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Confirmations", wireType)
				}
				x.Confirmations = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Confirmations |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ScriptPubKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ScriptPubKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Spendable", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Spendable = bool(v != 0)
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Safe", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Safe = bool(v != 0)
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LockTime", wireType)
				}
				x.LockTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LockTime |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsStaked", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsStaked = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_StakingPool_1_list)(nil)

type _StakingPool_1_list struct {
	list *[]*UTXO
}

func (x *_StakingPool_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_StakingPool_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_StakingPool_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UTXO)
	(*x.list)[i] = concreteValue
}

func (x *_StakingPool_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UTXO)
	*x.list = append(*x.list, concreteValue)
}

func (x *_StakingPool_1_list) AppendMutable() protoreflect.Value {
	v := new(UTXO)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StakingPool_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_StakingPool_1_list) NewElement() protoreflect.Value {
	v := new(UTXO)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StakingPool_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_StakingPool       protoreflect.MessageDescriptor
	fd_StakingPool_utxos protoreflect.FieldDescriptor
)

func init() {
	file_torram_btcstaking_utxo_proto_init()
	md_StakingPool = File_torram_btcstaking_utxo_proto.Messages().ByName("StakingPool")
	fd_StakingPool_utxos = md_StakingPool.Fields().ByName("utxos")
}

var _ protoreflect.Message = (*fastReflection_StakingPool)(nil)

type fastReflection_StakingPool StakingPool

func (x *StakingPool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_StakingPool)(x)
}

func (x *StakingPool) slowProtoReflect() protoreflect.Message {
	mi := &file_torram_btcstaking_utxo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_StakingPool_messageType fastReflection_StakingPool_messageType
var _ protoreflect.MessageType = fastReflection_StakingPool_messageType{}

type fastReflection_StakingPool_messageType struct{}

func (x fastReflection_StakingPool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_StakingPool)(nil)
}
func (x fastReflection_StakingPool_messageType) New() protoreflect.Message {
	return new(fastReflection_StakingPool)
}
func (x fastReflection_StakingPool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_StakingPool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_StakingPool) Descriptor() protoreflect.MessageDescriptor {
	return md_StakingPool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_StakingPool) Type() protoreflect.MessageType {
	return _fastReflection_StakingPool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_StakingPool) New() protoreflect.Message {
	return new(fastReflection_StakingPool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_StakingPool) Interface() protoreflect.ProtoMessage {
	return (*StakingPool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_StakingPool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Utxos) != 0 {
		value := protoreflect.ValueOfList(&_StakingPool_1_list{list: &x.Utxos})
		if !f(fd_StakingPool_utxos, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_StakingPool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "torram.btcstaking.StakingPool.utxos":
		return len(x.Utxos) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: torram.btcstaking.StakingPool"))
		}
		panic(fmt.Errorf("message torram.btcstaking.StakingPool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StakingPool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "torram.btcstaking.StakingPool.utxos":
		x.Utxos = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: torram.btcstaking.StakingPool"))
		}
		panic(fmt.Errorf("message torram.btcstaking.StakingPool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_StakingPool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "torram.btcstaking.StakingPool.utxos":
		if len(x.Utxos) == 0 {
			return protoreflect.ValueOfList(&_StakingPool_1_list{})
		}
		listValue := &_StakingPool_1_list{list: &x.Utxos}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: torram.btcstaking.StakingPool"))
		}
		panic(fmt.Errorf("message torram.btcstaking.StakingPool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StakingPool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "torram.btcstaking.StakingPool.utxos":
		lv := value.List()
		clv := lv.(*_StakingPool_1_list)
		x.Utxos = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: torram.btcstaking.StakingPool"))
		}
		panic(fmt.Errorf("message torram.btcstaking.StakingPool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StakingPool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "torram.btcstaking.StakingPool.utxos":
		if x.Utxos == nil {
			x.Utxos = []*UTXO{}
		}
		value := &_StakingPool_1_list{list: &x.Utxos}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: torram.btcstaking.StakingPool"))
		}
		panic(fmt.Errorf("message torram.btcstaking.StakingPool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_StakingPool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "torram.btcstaking.StakingPool.utxos":
		list := []*UTXO{}
		return protoreflect.ValueOfList(&_StakingPool_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: torram.btcstaking.StakingPool"))
		}
		panic(fmt.Errorf("message torram.btcstaking.StakingPool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_StakingPool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in torram.btcstaking.StakingPool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_StakingPool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StakingPool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_StakingPool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_StakingPool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*StakingPool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Utxos) > 0 {
			for _, e := range x.Utxos {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*StakingPool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Utxos) > 0 {
			for iNdEx := len(x.Utxos) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Utxos[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*StakingPool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StakingPool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StakingPool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Utxos", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Utxos = append(x.Utxos, &UTXO{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Utxos[len(x.Utxos)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: torram/btcstaking/utxo.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UTXO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId          string        `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`                           // Transaction ID
	Vout          uint32        `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`                                      // Output index
	Address       string        `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`                                 // Owner's address
	Amount        *v1beta1.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`                                   // Amount in tokens
	Confirmations uint64        `protobuf:"varint,5,opt,name=confirmations,proto3" json:"confirmations,omitempty"`                    // Number of confirmations
	ScriptPubKey  string        `protobuf:"bytes,6,opt,name=script_pub_key,json=scriptPubKey,proto3" json:"script_pub_key,omitempty"` // ScriptPubKey
	Spendable     bool          `protobuf:"varint,7,opt,name=spendable,proto3" json:"spendable,omitempty"`                            // Whether the UTXO is spendable
	Safe          bool          `protobuf:"varint,8,opt,name=safe,proto3" json:"safe,omitempty"`                                      // Whether the UTXO is safe to spend
	LockTime      uint64        `protobuf:"varint,9,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`              // Block height or timestamp until unlock
	IsStaked      bool          `protobuf:"varint,10,opt,name=is_staked,json=isStaked,proto3" json:"is_staked,omitempty"`             // Whether the UTXO is staked
}

func (x *UTXO) Reset() {
	*x = UTXO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torram_btcstaking_utxo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTXO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTXO) ProtoMessage() {}

// Deprecated: Use UTXO.ProtoReflect.Descriptor instead.
func (*UTXO) Descriptor() ([]byte, []int) {
	return file_torram_btcstaking_utxo_proto_rawDescGZIP(), []int{0}
}

func (x *UTXO) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *UTXO) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *UTXO) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UTXO) GetAmount() *v1beta1.Coin {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *UTXO) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *UTXO) GetScriptPubKey() string {
	if x != nil {
		return x.ScriptPubKey
	}
	return ""
}

func (x *UTXO) GetSpendable() bool {
	if x != nil {
		return x.Spendable
	}
	return false
}

func (x *UTXO) GetSafe() bool {
	if x != nil {
		return x.Safe
	}
	return false
}

func (x *UTXO) GetLockTime() uint64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *UTXO) GetIsStaked() bool {
	if x != nil {
		return x.IsStaked
	}
	return false
}

type StakingPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Utxos []*UTXO `protobuf:"bytes,1,rep,name=utxos,proto3" json:"utxos,omitempty"` // List of staked UTXOs
}

func (x *StakingPool) Reset() {
	*x = StakingPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torram_btcstaking_utxo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingPool) ProtoMessage() {}

// Deprecated: Use StakingPool.ProtoReflect.Descriptor instead.
func (*StakingPool) Descriptor() ([]byte, []int) {
	return file_torram_btcstaking_utxo_proto_rawDescGZIP(), []int{1}
}

func (x *StakingPool) GetUtxos() []*UTXO {
	if x != nil {
		return x.Utxos
	}
	return nil
}

var File_torram_btcstaking_utxo_proto protoreflect.FileDescriptor

var file_torram_btcstaking_utxo_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x74, 0x6f, 0x72, 0x72, 0x61, 0x6d, 0x2f, 0x62, 0x74, 0x63, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2f, 0x75, 0x74, 0x78, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x74, 0x6f, 0x72, 0x72, 0x61, 0x6d, 0x2e, 0x62, 0x74, 0x63, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x02, 0x0a, 0x04, 0x55, 0x54, 0x58, 0x4f,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x66, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x61, 0x66, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x64, 0x22, 0x3c, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x2d, 0x0a, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f, 0x72, 0x72, 0x61, 0x6d, 0x2e, 0x62, 0x74, 0x63, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x54, 0x58, 0x4f, 0x52, 0x05, 0x75, 0x74, 0x78,
	0x6f, 0x73, 0x42, 0xa5, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x72, 0x72, 0x61,
	0x6d, 0x2e, 0x62, 0x74, 0x63, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x55, 0x74,
	0x78, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1c, 0x74, 0x6f, 0x72, 0x72, 0x61,
	0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x72, 0x72, 0x61, 0x6d, 0x2f, 0x62, 0x74, 0x63,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0xa2, 0x02, 0x03, 0x54, 0x42, 0x58, 0xaa, 0x02, 0x11,
	0x54, 0x6f, 0x72, 0x72, 0x61, 0x6d, 0x2e, 0x42, 0x74, 0x63, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0xca, 0x02, 0x11, 0x54, 0x6f, 0x72, 0x72, 0x61, 0x6d, 0x5c, 0x42, 0x74, 0x63, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0xe2, 0x02, 0x1d, 0x54, 0x6f, 0x72, 0x72, 0x61, 0x6d, 0x5c, 0x42,
	0x74, 0x63, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x54, 0x6f, 0x72, 0x72, 0x61, 0x6d, 0x3a, 0x3a,
	0x42, 0x74, 0x63, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_torram_btcstaking_utxo_proto_rawDescOnce sync.Once
	file_torram_btcstaking_utxo_proto_rawDescData = file_torram_btcstaking_utxo_proto_rawDesc
)

func file_torram_btcstaking_utxo_proto_rawDescGZIP() []byte {
	file_torram_btcstaking_utxo_proto_rawDescOnce.Do(func() {
		file_torram_btcstaking_utxo_proto_rawDescData = protoimpl.X.CompressGZIP(file_torram_btcstaking_utxo_proto_rawDescData)
	})
	return file_torram_btcstaking_utxo_proto_rawDescData
}

var file_torram_btcstaking_utxo_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_torram_btcstaking_utxo_proto_goTypes = []interface{}{
	(*UTXO)(nil),         // 0: torram.btcstaking.UTXO
	(*StakingPool)(nil),  // 1: torram.btcstaking.StakingPool
	(*v1beta1.Coin)(nil), // 2: cosmos.base.v1beta1.Coin
}
var file_torram_btcstaking_utxo_proto_depIdxs = []int32{
	2, // 0: torram.btcstaking.UTXO.amount:type_name -> cosmos.base.v1beta1.Coin
	0, // 1: torram.btcstaking.StakingPool.utxos:type_name -> torram.btcstaking.UTXO
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_torram_btcstaking_utxo_proto_init() }
func file_torram_btcstaking_utxo_proto_init() {
	if File_torram_btcstaking_utxo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_torram_btcstaking_utxo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTXO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torram_btcstaking_utxo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_torram_btcstaking_utxo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_torram_btcstaking_utxo_proto_goTypes,
		DependencyIndexes: file_torram_btcstaking_utxo_proto_depIdxs,
		MessageInfos:      file_torram_btcstaking_utxo_proto_msgTypes,
	}.Build()
	File_torram_btcstaking_utxo_proto = out.File
	file_torram_btcstaking_utxo_proto_rawDesc = nil
	file_torram_btcstaking_utxo_proto_goTypes = nil
	file_torram_btcstaking_utxo_proto_depIdxs = nil
}
